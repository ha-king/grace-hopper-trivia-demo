Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. 

Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnetOneCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnetTwoCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnetOneCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnetTwoCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !Ref PublicSubnetOneCIDR
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !Ref PublicSubnetTwoCIDR
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !Ref PrivateSubnetOneCIDR
      MapPublicIpOnLaunch: false

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !Ref PrivateSubnetTwoCIDR
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne

  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  ApplicationHostSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: Allow SSH from Management VPC
          VpcId: !Ref VPC
          SecurityGroupEgress:
            -
              IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            -
              IpProtocol: tcp
              FromPort: 443
              ToPort: 443
              CidrIp: 0.0.0.0/0

  VPCESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "vpce-sg"
      GroupDescription: "VPCE endpoint security group to allow traffic from "
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt FargateContainerSecurityGroup.GroupId
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - SourceSecurityGroupId: !GetAtt ApplicationHostSecurityGroup.GroupId
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  # Gateway and VPCE PrivateLink 
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableOne
        - !Ref PrivateRouteTableTwo
      ServiceName: 
        Fn::Join: 
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.s3'
      
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join: 
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ecr.api'
    
  ECRDKRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join:
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ecr.dkr'

  SSMApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join:
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ssm'
 
  SSMMessagesApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join:
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ssmmessages'
 
  EC2ApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join:
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ec2'

  EC2MessagesApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join:
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ec2messages'

  LogsApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      ServiceName: 
        Fn::Join:
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.logs'

 # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # A public facing load balancer
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']

  # A dummy target group is used to setup the ALB to just drop traffic
  # The premise is that other stacks may add target groups, rules
  
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: 
        Fn::Join:
        - '-'
        - - !Ref 'AWS::StackName'
          - 'drop-1'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  # Listener with default action to forward to drop.
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

Outputs:
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name:
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'VPCId'

  PublicSubnetOne:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnetOne
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'PublicSubnetOne' 

  PublicSubnetTwo:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnetTwo
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'PublicSubnetTwo' 

  PrivateSubnetOne:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnetOne
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'PrivateSubnetOne' 

  PrivateSubnetTwo:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnetTwo
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'PrivateSubnetTwo' 

  ApplicationHostSecurityGroup:
    Description: A security group used to allow Application hosts access to SSM within the private subnet
    Value: !Ref 'ApplicationHostSecurityGroup'
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'ApplicationHostSecurityGroup'

  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'FargateContainerSecurityGroup'

  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'PublicListener'

  ExternalUrl:
    Description: The url of the external load balancer
    Value: 
      Fn::Join:
        - ''
        - - 'http://'
          - !GetAtt 'PublicLoadBalancer.DNSName'
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'ExternalUrl'    

  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'ECSRole'

  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: 
        Fn::Join: 
          - ':'
          - - !Ref 'AWS::StackName'
            - 'ECSTaskExecutionRole'
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: 
        Fn::Join:
          - ':'
          - - !Ref 'AWS::StackName'
            - 'ClusterName'
